21232
dfg
34
dsfdf
sdfo4k
-I$(HEADER)


""df"dsf"df""s

void	single_double_quot(char *str, int *i)
{
	if (str[*i] == 34)
	{
		if (!dollar_check(str, *i))
			str = new_quot_del(str, i, 34);
		else
			str = new_dollar(str, i, 1);
	}
	else if (str[*i] == 39) 
		str = new_quot_del(str, i, 39);
}


char	*dollar(char *str, int *p, int flag)
{
	int		k;
	int		j;

	j = *p;
	if (str[*p] == 34)
		*p += 1;
	while ((flag == 1 && str[*p] && str[*p] != 34)
		|| (flag == 0 && str[*p] && str[*p] != 34 && str[*p] != 39))
	{
		if (str[*p] == '$')
		{
			*p += 1;
			if (str[*p] == '$')
				str = incorrect_dollar(str, p);
			else
			{
				k = *p;
				while (str[*p] && str[*p] != 34 && str[*p] != 39 
					&& str[*p] != '$' && str[*p] != ' ')
					*p += 1;
				if (*p > k)
					str = add_fromenv(str, k, p);
			}
		}
		*p += 1;
	}
	if (flag == 1)
		str = quot_del_after_dollar(str, j, p);
	*p -= 1;
	return (str);
}

"G"$""$"$""$"$"$G"
"G"$""$"$""$"$"$G"$$$$$$$
$$$L$Pkjsdf$$
$$$L$Pkjsdf$""$USER
$$$L$Pkjsdf$"$USER"

int	singlequoted(char *str, int i, int j)
{
	int	flag;
	int	t;

	flag = 0;
	t = 0;
	while (str[j] && str[j] != 34)
	{
		if (flag == 0 && str[j] == 39)
		{
			flag = 1;
			t = j;
		}
		else if (flag == 1 && str[j] == 39)
		{
			if (i > t && i < j)
				return (1);
			flag = 0;
		}
		j++;
	}
	return (0);
}

void	quot_correct(void)
{
	shl.t1 = shl.cells;
	while (shl.t1)
	{
		shl.i = 0;
		while (shl.t1->word[shl.i])
		{
			printf("shl.t1->word[shl.i]1: %c\n", shl.t1->word[shl.i]);
			printf("shl.i1: %d\n", shl.i);
			if (shl.t1->word[shl.i] == '$')
				shl.t1->word = dollar(shl.t1->word, &(shl.i), 0);
			else if (shl.t1->word[shl.i] == 34 || shl.t1->word[shl.i] == 39)
			{
				if (shl.t1->word[shl.i] == 34)
				{
					if (!dollar_check(shl.t1->word, shl.i))
						shl.t1->word = quot_del(shl.t1->word, &(shl.i), 34);
					else
						shl.t1->word = dollar(shl.t1->word, &(shl.i), 1);
				}
				else if (shl.t1->word[shl.i] == 39) 
					shl.t1->word = quot_del(shl.t1->word, &(shl.i), 39);
			}
			printf("shl.t1->word2: %s\n", shl.t1->word);
			printf("shl.t1->word[shl.i]2: %c\n", shl.t1->word[shl.i]);
			printf("shl.i2: %d\n\n", shl.i);
			shl.i++;
		}
		shl.t1 = shl.t1->next;
	}
}